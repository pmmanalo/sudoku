import java.util.Scanner;

public class Sudoku {
	        public char board[][];
	        public Sudoku () {
	        	board = new char[9][9];
	           }
	        public void inputBoard()throws Exception {
	    		for(int i =0; i<9; i++) {//populating the board with 0
	    			for(int j =0; j<9; j++) {
	    				board[i][j]= '0';
	    			}
	    		}
	    		//manually entering values for the sudoku board
	    		board[0][0]='7';
	    		board[0][7]='3';
	    		board[1][3]='2';
	    		board[1][5]='9';
	    		board[1][7]='4';
	    		board[2][1]='5';
	    		board[2][6]='9';
	    		board[2][8]='1';
	    		board[3][3]='6';
	    		board[3][4]='4';
	    		board[3][8]='3';
	    		board[4][1]='9';
	    		board[4][4]='3';
	    		board[4][7]='2';
	    		board[5][0]='8';
	    		board[5][4]='2';
	    		board[5][5]='7';
	    		board[6][0]='3';
	    		board[6][2]='4';
	    		board[6][7]='1';
	    		board[7][1]='7';
	    		board[7][3]='3';
	    		board[7][5]='5';
	    		board[8][1]='6';
	    		board[8][8]='7';

	    		
	    		for(int i =0; i<9; i++) { // checking for duplicate values in the rows
	    			for(int j =0; j<9; j++) {
		    				for(int l = 0; l <9; l++) {
	    					if(board[i][j] == board[i][l]&& j!= l && board[i][j] != '0' && board[i][l] != '0') {
			    				System.out.println("number " + board[i][l]+ " in column " + l + " and number " + board[i][j]+ " in column " + j + " in same row, does not work");
	    						throw new IllegalArgumentException();
	    						
	    				}		// checking for duplicate values in the columns
	    					if(board[j][i] == board[l][i]&& j!= l && board[j][i] != '0' && board[l][i] != '0') {
			    				System.out.println("number " + board[l][i]+ " in row " + l + " and number " + board[j][i]+ " in row " + j + " in same column, does not work");
	    						throw new IllegalArgumentException();
	    						
	    				}
		    				}
	    			}
	    		}
	    		
	    	}
	        

	        public void printBoard() {
	        	boolean valid=true;
            	outerloop:
            		for(int i = 0;i<9;i++) {//checking to see if board is solvable
                        for(int j = 0;j<9;j++) {
                        	if(board[i][j] == '0') {
                        		System.out.println("board unable to be solved, please enter valid board");
                        		valid=false;
                        		break outerloop;
                        	}
                        }
            		}
	        	if(valid) { //if board is solvable then it will print the results
	                for(int i = 0;i<9;i++) {
	                        for(int j = 0;j<9;j++) {
	                                System.out.print(board[i][j] + " ");
	                        }
	                        System.out.println();
	                }
	        }
	        }
	       
	       
	       public boolean validate(int col, int row, char k, char[][] board){
	           
	        	for(int i = 0;i<9;i++) {//checking other spots in board for values of 1-9
	                if(board[i][col]==k)
	                    return false;
	        	}
	        	
	        	for(int j =0;j<9;j++) {
	                    if(board[row][j]==k)
	                        return false;
	        	}
	        	
	            col -=col%3;
	            row -=row%3;
	            
	            for(int i = row;i<row+3;i++) {
	            	for(int j = col;j<col+3;j++) {
	            		if(board[i][j]==k)
	            			return false;
	                }
	            }
	            return true;
	       }
	       public boolean solveSudoku2(char[][] board){
	            boolean valid = true;
	            int row, col;
	            row=0;
	            col=0;
	            
	            for(int i = 0; i < 9; i++){
	                for(int j = 0;j < 9; j++){
	                    if(board[i][j]=='0'){//checking for values of 0 in the board
	                        row = i;
	                        col = j;
	                        valid = false;
	                        break;
	                    }
	                }
	                if(valid == false)//we break to fill the spot
	                    break;
	            }
	            if(valid == true)//if no other values of 0 left in the board then we break 
	                return true;
	            
	            for(char i ='1';i<='9';i++){//otherwise we populate the spots with 0
	                if(validate(col,row, i, board)){ //calling validate method, if true, spot gets filled with i value
	                    board[row][col] = i;
	                    if(solveSudoku2(board))
	                        return true;//returns true if no 0 left on board
	                    board[row][col]='0';
	                }
	            }
	            return false;
	        }
	       public boolean solveSudoku () {
	           return solveSudoku2(board);
	       }
public static void main(String[] args) throws Exception {
     Sudoku sudoku = new Sudoku();
     sudoku.inputBoard();
     sudoku.solveSudoku();
     sudoku.printBoard();
 }
}
