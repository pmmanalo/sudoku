import java.util.Scanner;

public class Sudoku {
	public char board[][];
	/**
	 * Default constructor -- construct an empty Sudoku puzzle
	 */
	public Sudoku () {
		
	}
		
	/**
	 * Input an initial starting board for Sudoku. Consider using one online, such as
	 * https://www.sudokuoftheday.com/
	 * @param board
	 * @throws Exception
	 */
	public void inputBoard() {
		board = new char[][] {
            { '3', '0', '6', '5', '0', '8', '4', '0', '0' },
            { '5', '2', '0', '0', '0', '0', '0', '0', '0' },
            { '0', '8', '0', '0', '0', '0', '2', '3', '1' },
            { '0', '0', '0', '0', '1', '0', '0', '8', '0' },
            { '0', '0', '0', '8', '6', '3', '0', '0', '5' },
            { '0', '0', '0', '0', '2', '0', '6', '0', '0' },
            { '1', '3', '4', '0', '0', '0', '2', '5', '0' },
            { '0', '0', '0', '0', '0', '0', '0', '7', '4' },
            { '0', '0', '5', '2', '0', '6', '3', '0', '0' }};
            
		/*Scanner input = new Scanner(System.in);
		for(int i =0; i<9; i++) {
			for(int j =0; j<9; j++) {
				board[i][j] = '0';
			}
		}
		board[][]={
		*/
	}
		
	
	/**
	 * Solves the Sudoku puzzle from the starting position, if possible.
	 * @return true if the puzzle is solved; false if it cannot be solved.
	 */
	public boolean solveSudoku() {
		char temp=0;//holder for incremental value
		for(int row=0;row<9;row++) {  //loop for our row  
			for(int col = 0; col<9; col++) { //loop for our columns    
				if(board[row][col] == '0') { //comparison to see if box is empty     
					temp='1';       //reset temp value
					for(int i = 0; i<9;i++) { //nested loop to check rows and columns for matching value      
						for(int k = 0; k<9; k++) {        
							
							if(board[row][k]== temp && temp !='9' ) //comparison to check for duplicate value
							{         
								temp++;       //move to next value if duplicate found  
								k=0;
							}         
							for(int j=0;j<9;j++) {          
								if(board[j][col]== temp && temp!='9' ) 
								{           
										temp++;           
										j=0;          
								}          
							}        
							
						}          
						//populate board
					}      board[row][col] = temp;      
				}    
			} 
	     }
		//checking the board for unsolvable boxes
		for(int i = 0;i<9;i++) {
            for(int j = 0;j<9;j++) {
                    if(board[i][j]=='0')
                   	 return false;	
            }
	}
		return true;//otherwise return true

	}
	


	/**
	 * Prints the Sudoku board to the console.
	 */
	public void printBoard() {
		if(solveSudoku()) {
		 for(int i = 0;i<9;i++) {
             for(int j = 0;j<9;j++) {
                     System.out.print(board[i][j] + " ");
             }
             System.out.println();
     }
		}
		else
			System.out.println("cannot solve board");
		
	}
	
	public static void main(String[] args) {
		Sudoku sudoku = new Sudoku();
		sudoku.inputBoard();
		sudoku.solveSudoku();
		sudoku.printBoard();
	}
	
}
